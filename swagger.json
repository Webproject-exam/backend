{
  "openapi": "3.0.1",
  "info": {
    "title": "Final Exam API - Webproject",
    "description": "Description NodeJS server",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about our service",
    "url": "api-docs"
  },
  "servers": [
    {
      "url": "http://localhost:5000/",
      "description": "Local development server"
    },
    {
      "url": "https://webproject-exam.netlify.app/",
      "description": "Heroku backend server"
    }
  ],
  "tags": [
    {
      "name": "Authenticate",
      "description": "Everything authentication"
    },
    {
      "name": "Profile",
      "description": "User profile"
    },
    {
      "name": "Manage",
      "description": "Manager page"
    },
    {
      "name": "Plant",
      "description": "Plant page"
    },
    {
      "name": "Email",
      "description": "Email manager"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": ["Authenticate"],
        "summary": "User login",
        "operationId": "userLogin",
        "requestBody": {
          "description": "User that wants to login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "headers": {
              "Set-Cookie": {
                "description": "`refreshToken`",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User logged inn successfully"
                    },
                    "user": {
                      "type": "string",
                      "example": "email"
                    },
                    "jwtToken": {
                      "type": "string",
                      "example": "tokenstring"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, either wrong email and/or password. Please try again.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Wrong email and/or password. Please try again."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "There was a server-side error with login.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "There was a server-side error with login"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/refresh-token": {
      "post": {
        "tags": ["Authenticate"],
        "summary": "Use a refresh token to generate a new JWT access token and a new refresh token",
        "description": "The refresh token is sent and returned via cookies.",
        "operationId": "refreshToken",
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "description": "The `refreshToken` cookie",
            "schema": {
              "type": "string",
              "example": "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details, a JWT access token and a new refresh token cookie",
            "headers": {
              "Set-Cookie": {
                "description": "`refreshToken`",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Token refreshed successfully"
                    },
                    "user": {
                      "type": "string",
                      "example": "emailstring"
                    },
                    "jwtToken": {
                      "type": "string",
                      "example": "tokenstring"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "There was an error creating a new refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "security": [
          {
            "refresh_token": []
          },
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/revoke-token": {
      "post": {
        "tags": ["Authenticate"],
        "summary": "Revoke token of user",
        "operationId": "revokeToken",
        "responses": {
          "200": {
            "description": "Token revoked successfully",
            "content": {}
          },
          "400": {
            "description": "Token is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "There was an error revoking the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "security": [
          {
            "refresh_token": []
          },
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/profile": {
      "get": {
        "tags": ["Profile"],
        "summary": "User get information about their own profile",
        "description": "Name, surname, email, role is shown",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "User firstname"
                    },
                    "surname": {
                      "type": "string",
                      "description": "User lastname"
                    },
                    "email": {
                      "type": "string",
                      "description": "User email"
                    },
                    "role": {
                      "type": "string",
                      "description": "User role"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Could not get user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "patch": {
        "tags": ["Profile"],
        "summary": "Users can update their own information",
        "description": "User can update name, surname and password using old password and new password",
        "operationId": "updateUser",
        "requestBody": {
          "description": "New user information, can update name, surname and/or password",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User firstname"
                  },
                  "surname": {
                    "type": "string",
                    "description": "User lastname"
                  },
                  "password": {
                    "type": "string",
                    "description": "User password"
                  },
                  "oldPassword": {
                    "type": "string",
                    "description": "User email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {}
          },
          "400": {
            "description": "Name, surname or password and oldPassword is needed || incorrect password provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong when updating the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/manage/users": {
      "post": {
        "tags": ["Manage"],
        "summary": "Manager user page",
        "description": "Manager can create a new user using name, surname, role, email and password",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "surname": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "internal server error when creating user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "get": {
        "tags": ["Manage"],
        "summary": "Get a list of all users",
        "description": "Manager gets all users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Users array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "example": [
                    {
                      "role": "manager",
                      "name": "string",
                      "surname": "string",
                      "email": "string"
                    },
                    {
                      "role": "gardener",
                      "name": "string",
                      "surname": "string",
                      "email": "string"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error querying for users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Could not get all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "patch": {
        "tags": ["Manage"],
        "summary": "Update another user",
        "description": "Manager updates a user",
        "operationId": "updateUserManager",
        "requestBody": {
          "description": "User to update",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "selectedUser": {
                    "type": "string",
                    "description": "User email"
                  },
                  "password": {
                    "type": "string",
                    "description": "User password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "surname": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot update user with email ${email}.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error when updating user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "delete": {
        "tags": ["Manage"],
        "summary": "Delete a user",
        "description": "Manager deletes a user",
        "operationId": "deleteUser",
        "requestBody": {
          "description": "User to delete",
          "content": {
            "application/json": {
              "schema": {
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User with email=${email} was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot find user with email ${email}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error when deleting user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/manage/plants": {
      "post": {
        "tags": ["Manage"],
        "summary": "Manager plant page",
        "description": "Manager can create a new user using name, surname, role, email and password",
        "operationId": "createPlant",
        "requestBody": {
          "description": "Plant to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create plant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  },
                  "example": {
                    "name": "string",
                    "lighting": "string",
                    "building": "string",
                    "floor": "string",
                    "room": "string",
                    "image": "string",
                    "waterNext": "date",
                    "waterFrequency": "number",
                    "waterAmount": "string",
                    "lastWateredDate": "string",
                    "waterFrequency": "string",
                    "fertNext": "date",
                    "fertFrequency": "number",
                    "fertAmount": "string",
                    "description": "string",
                    "placement": "string",
                    "waterering": "string",
                    "nutrition": "string",
                    "createdAt": "date"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Plant with name ${plant.name} has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "name, placement, watering, fertilization and lighting is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "internal server error when creating plant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "patch": {
        "tags": ["Manage"],
        "summary": "Update existing plant",
        "description": "Manager updates a plant",
        "operationId": "updatePlant",
        "requestBody": {
          "description": "Plant to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "items": {
                  "$ref": "#/components/schemas/Plant"
                },
                "example": {
                  "name": "string",
                  "lighting": "string",
                  "building": "string",
                  "floor": "string",
                  "room": "string",
                  "image": "string",
                  "waterNext": "date",
                  "waterFrequency": "number",
                  "waterAmount": "string",
                  "lastWateredDate": "string",
                  "waterFrequency": "string",
                  "fertNext": "date",
                  "fertFrequency": "number",
                  "fertAmount": "string",
                  "description": "string",
                  "placement": "string",
                  "waterering": "string",
                  "nutrition": "string",
                  "createdAt": "date"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plant ${plant.name} successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "400": {
            "description": "Plant with ${id} does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error when updating plant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "delete": {
        "tags": ["Manage"],
        "summary": "Delete a plant",
        "description": "Manager deletes a plant",
        "operationId": "deletePlant",
        "requestBody": {
          "description": "Plant to delete",
          "content": {
            "application/json": {
              "schema": {
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plant with id ${id} was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot find plant with id ${id}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error when deleting plant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/:id": {
      "get": {
        "tags": ["Plant"],
        "summary": "Get individual plants",
        "description": "An individual plant in database",
        "operationId": "getPlant",
        "responses": {
          "200": {
            "description": "Individual plant object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  },
                  "example": {
                    "name": "string",
                    "lighting": "string",
                    "building": "string",
                    "floor": "string",
                    "room": "string",
                    "image": "string",
                    "waterNext": "date",
                    "waterFrequency": "number",
                    "waterAmount": "string",
                    "lastWateredDate": "string",
                    "waterFrequency": "string",
                    "fertNext": "date",
                    "fertFrequency": "number",
                    "fertAmount": "string",
                    "description": "string",
                    "placement": "string",
                    "waterering": "string",
                    "nutrition": "string",
                    "createdAt": "date"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error when fetching plant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Plant"],
        "summary": "Update plant care",
        "description": "update water next, fert next, last lastPostponedBy and lastPostponedReason",
        "operationId": "updatePlantCare",
        "responses": {
          "200": {
            "description": "Plant updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error when updating plant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/request": {
      "patch": {
        "tags": ["Plant"],
        "summary": "Email to gardeners sent",
        "description": "Send email to all gardeners",
        "operationId": "requestPlant",
        "responses": {
          "200": {
            "description": "Plant updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error when updating plant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["Plant"],
        "summary": "Get all plants",
        "description": "A list of all plants in database",
        "operationId": "getAllPlants",
        "responses": {
          "200": {
            "description": "Plants array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  },
                  "example": [
                    {
                      "name": "string",
                      "lighting": "string",
                      "building": "string",
                      "floor": "string",
                      "room": "string",
                      "image": "string",
                      "waterNext": "date",
                      "waterFrequency": "number",
                      "waterAmount": "string",
                      "lastWateredDate": "string",
                      "waterFrequency": "string",
                      "fertNext": "date",
                      "fertFrequency": "number",
                      "fertAmount": "string",
                      "description": "string",
                      "placement": "string",
                      "waterering": "string",
                      "nutrition": "string",
                      "createdAt": "date"
                    },
                    {
                      "name": "string",
                      "lighting": "string",
                      "building": "string",
                      "floor": "string",
                      "room": "string",
                      "image": "string",
                      "waterNext": "date",
                      "waterFrequency": "number",
                      "waterAmount": "string",
                      "lastWateredDate": "string",
                      "waterFrequency": "string",
                      "fertNext": "date",
                      "fertFrequency": "number",
                      "fertAmount": "string",
                      "description": "string",
                      "placement": "string",
                      "waterering": "string",
                      "nutrition": "string",
                      "createdAt": "date"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error when fetching all plants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Plant"],
        "summary": "Water plant",
        "description": "Update plant date, fert next and fert amount, water amount, water next",
        "operationId": "updatePlantCare",
        "responses": {
          "200": {
            "description": "Plant updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error when updating plant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reset_password": {
      "post": {
        "tags": ["Email"],
        "summary": "Send forgot password email",
        "description": "Send a email to the user to reset the password",
        "operationId": "forgotPasswordEmail",
        "requestBody": {
          "description": "Email of the user that forgot the password",
          "content": {
            "application/json": {
              "schema": {
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error trying to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["name", "surname", "role", "email", "password"],
        "properties": {
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "Which role the user has",
            "enum": ["manager", "gardener"]
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Plant": {
        "type": "object",
        "required": [
          "name",
          "lighting",
          "image",
          "building",
          "floor",
          "room",
          "waterNext",
          "waterFrequency",
          "waterAmount",
          "lastWateredBy",
          "lastWateredDate",
          "lastWateredReason",
          "lastPostponedBy",
          "lastPostponedReason",
          "fertNext",
          "fertFrequency",
          "fertAmount",
          "lastFertReason",
          "lastFertBy",
          "lastFertDate",
          "description",
          "placement",
          "waterering",
          "nutrition",
          "createdAt"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "lighting": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "room": {
            "type": "string"
          },
          "waterNext": {
            "type": "date"
          },
          "waterFrequency": {
            "type": "number"
          },
          "waterAmount": {
            "type": "string",
            "description": "Waterering amount",
            "enum": ["plentiful", "average", "sparse"],
            "default": "plentiful"
          },
          "lastWateredDate": {
            "type": "string"
          },
          "lastWateredReason": {
            "type": "string"
          },
          "lastPostponedBy": {
            "type": "string"
          },
          "lastPostponedBy": {
            "type": "string"
          },
          "lastPostponedReason": {
            "type": "string"
          },
          "fertNext": {
            "type": "date"
          },
          "fertFrequency": {
            "type": "number"
          },
          "lastFertReason": {
            "type": "string"
          },
          "fertAmount": {
            "type": "string",
            "description": "Fertilization amount",
            "enum": ["plentiful", "average", "sparse"],
            "default": "plentiful"
          },
          "description": {
            "type": "string"
          },
          "placement": {
            "type": "string"
          },
          "waterering": {
            "type": "string"
          },
          "nutrition": {
            "type": "string"
          },
          "createdAt": {
            "type": "date"
          }
        },
        "xml": {
          "name": "Plant"
        }
      },
      "UserLogin": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "ApiResponseError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "UnauthorizedError": {
        "description": "Access token is missing or invalid, or the user does not have access to perform the action",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "jwt_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "refresh_token": {
        "type": "apiKey",
        "name": "refreshToken",
        "in": "cookie"
      }
    }
  }
}
